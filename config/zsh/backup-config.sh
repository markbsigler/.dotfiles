#!/bin/bash
# ~/.config/zsh/backup-config.sh - Backup your shell configuration

set -e

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}🔄 Creating configuration backup...${NC}"

# Create backup directory with timestamp
BACKUP_DIR="$HOME/.config/zsh-backup-$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR"

# Backup zsh configuration
echo "Backing up zsh configuration..."
if [[ -d "$HOME/.config/zsh" ]]; then
    cp -r "$HOME/.config/zsh" "$BACKUP_DIR/"
fi

# Backup main zsh files
echo "Backing up main zsh files..."
for file in .zshrc .zprofile .zshenv; do
    if [[ -f "$HOME/$file" ]]; then
        cp "$HOME/$file" "$BACKUP_DIR/"
    fi
done

# Backup vim configuration
echo "Backing up vim configuration..."
for file in .vimrc .vimrc.local .gvimrc; do
    if [[ -f "$HOME/$file" ]]; then
        cp "$HOME/$file" "$BACKUP_DIR/"
    fi
done

# Backup vim directory (excluding large plugin files)
if [[ -d "$HOME/.vim" ]]; then
    mkdir -p "$BACKUP_DIR/.vim"
    # Backup config files but not the large plugin directories
    find "$HOME/.vim" -maxdepth 1 -type f -exec cp {} "$BACKUP_DIR/.vim/" \;
    
    # Backup plugin list (from vim-plug)
    if [[ -f "$HOME/.vim/autoload/plug.vim" ]]; then
        mkdir -p "$BACKUP_DIR/.vim/autoload"
        cp "$HOME/.vim/autoload/plug.vim" "$BACKUP_DIR/.vim/autoload/"
    fi
fi

# Create restore script
cat > "$BACKUP_DIR/restore.sh" << 'EOF'
#!/bin/bash
# Restore script generated by backup-config.sh

echo "⚠️  This will restore your backed up configuration files."
echo "Current files will be overwritten. Are you sure? (y/N)"
read -r response

if [[ "$response" =~ ^[Yy]$ ]]; then
    BACKUP_DIR="$(dirname "$0")"
    
    # Restore zsh configuration
    if [[ -d "$BACKUP_DIR/zsh" ]]; then
        cp -r "$BACKUP_DIR/zsh" "$HOME/.config/"
        echo "✅ Restored zsh configuration"
    fi
    
    # Restore main zsh files
    for file in .zshrc .zprofile .zshenv; do
        if [[ -f "$BACKUP_DIR/$file" ]]; then
            cp "$BACKUP_DIR/$file" "$HOME/"
            echo "✅ Restored $file"
        fi
    done
    
    # Restore vim configuration
    for file in .vimrc .vimrc.local .gvimrc; do
        if [[ -f "$BACKUP_DIR/$file" ]]; then
            cp "$BACKUP_DIR/$file" "$HOME/"
            echo "✅ Restored $file"
        fi
    done
    
    # Restore vim autoload
    if [[ -d "$BACKUP_DIR/.vim" ]]; then
        mkdir -p "$HOME/.vim"
        cp -r "$BACKUP_DIR/.vim/"* "$HOME/.vim/"
        echo "✅ Restored vim configuration"
    fi
    
    echo ""
    echo "🎉 Configuration restored successfully!"
    echo "Run 'source ~/.zshrc' to reload your shell configuration."
else
    echo "Restore cancelled."
fi
EOF

chmod +x "$BACKUP_DIR/restore.sh"

# Create archive
echo "Creating compressed archive..."
cd "$(dirname "$BACKUP_DIR")"
tar -czf "${BACKUP_DIR}.tar.gz" "$(basename "$BACKUP_DIR")"

echo -e "${GREEN}✅ Backup completed!${NC}"
echo ""
echo "Backup location: $BACKUP_DIR"
echo "Archive created: ${BACKUP_DIR}.tar.gz"
echo ""
echo "To restore later, run:"
echo "  cd '$BACKUP_DIR' && ./restore.sh"
echo ""
echo "Or extract the archive and run the restore script:"
echo "  tar -xzf '${BACKUP_DIR}.tar.gz'"
echo "  cd '$(basename "$BACKUP_DIR")' && ./restore.sh"
